import type { Provider } from "@nestjs/common";
import type { ConfigFactoryKeyHost, ConfigType } from "@nestjs/config";

/**
 * 'ReturnType' signature for use with Generics with a 'ReturnType'.
 *
 * NOTE: Type is required to satisfy generic constraint with 'ReturnType<T>'.
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
type AnyArgs = (...args: any) => any;

// TODO: Figure out whether the stub factory function could return a 'ConfigType' (cleaner)
//         instead of an implicit 'ConfigType' (from implicit return typing).

/**
 * Create a config stub factory to allow generating config stubs with overridden values.
 *
 * Effectively returns a factory function that can be called to generate a config stub,
 *   but with the added benefit of being able to pass override config values. The resulting
 *   config stub fulfills the real config interface (but with fake/valid values).
 *
 * NOTE: Requires config interface to be exported from file to avoid TS import errors!?
 *
 * @param   config - Stubbed config values
 * @returns Factory function to generate a config stub (with optional override values)
 *
 * @example
 * const sampleConfig = registerAs("sample", () => ({ ... }));
 * const stubSampleConfig = createConfigStubFactory<typeof sampleConfig>({
 *   base: "value",
 *   another: "key",
 * });
 * const sampleConfigStub = stubSampleConfig({ base: "override" });
 */
export const createConfigStubFactory =
  <T extends AnyArgs>(config: ReturnType<T>) =>
  (override: Partial<ReturnType<T>> = {}): T => {
    return {
      ...config,
      ...override,
    } as ConfigType<T>;
  };

/**
 * Create a config provider stub factory to allow generating config provider stubs with overridden values.
 *
 * Effectively returns a factory function that can be called go generate a config provider stub,
 *   but with the added benefit of being able to pass override config values. The resulting
 *   config provider stub can be injected as a testing module provider to inject the appropriate
 *   config stub (with the fake/valid values).
 *
 * @param   configFactory - Config factory being stubbed (result of 'registerAs()')
 * @param   stubConfig    - Function generated by config stub factory (with optional override values)
 * @returns Factory function to generate a config provider stub (with optional override values)
 *
 * @example
 * const sampleConfig = registerAs("sample", () => ({ ... }));
 * const stubSampleConfig = createConfigStubFactory<typeof sampleConfig>({ ... });
 * const stubSampleConfigProvider = createConfigProviderFactory(sampleConfig, stubSampleConfig);
 * const sampleConfigProviderStub = stubSampleConfigProvider({ base: "override" });
 */
export const createConfigProviderFactory =
  <T extends AnyArgs>(
    configFactory: ConfigFactoryKeyHost<ReturnType<T>>,
    stubConfig: (config?: Partial<ReturnType<T>>) => ConfigType<T>,
  ) =>
  (config?: Partial<ReturnType<T>>): Provider => ({
    provide: configFactory.KEY,
    useValue: stubConfig(config),
  });
